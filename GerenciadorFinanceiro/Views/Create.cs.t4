<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
#>

@{
    ViewBag.Title = "ViewDataTypeShortName";
	Layout = null;
}

<!-- <h2><#= ViewName#></h2> 
<h2><#= ViewDataTypeShortName#></h2> -->
<#
    PushIndent("    ");
}
#>

<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Cadastrar <#= ViewDataTypeShortName#></h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
			@using (Html.BeginForm()) 
			{
				@Html.AntiForgeryToken()
				
				<fieldset class="scheduler-border  mt-4 col-12  ">
<# 
    if (isControlHtmlAttributesSupported) {
#>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
<#        
    } else {
#>
        @Html.ValidationSummary(true)
<#      
    }
#>
<#
foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (property.IsPrimaryKey && IsPropertyGuid(property)) {
            continue;
        }

#>
        <div class="form-group row">
<#
        if (property.IsForeignKey) {
#>
            @Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property) #>", htmlAttributes: new { @class = "control-label col-md-5 col-sm-12 requerido" })
<#
        } else {
#>
            @Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-5 col-sm-12 " })
<#
        }
#>
            <div class="col-md-7">
<#
        bool isCheckbox = property.TypeName.Equals(boolType);
        if (property.IsForeignKey) {
#>
<# 
            if (isControlHtmlAttributesSupported) {
#>
                @Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" , @required = true , @style = "text-transform: uppercase" })
<#
            } else {
#>
                @Html.DropDownList("<#= property.PropertyName #>", null)
<#
            }
#>
<#
        } else  if (isControlHtmlAttributesSupported) {
            if (isCheckbox) {
#>
                <div class="checkbox custom-checkbox custom-control">
<#
                PushIndent("    ");
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #> , htmlAttributes: new { @class = "custom-control-input" })
<#
            } else if (property.IsEnum && !property.IsEnumFlags) {
#>
                @Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
<#
            } 
        } else {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
        }
#>
<# 
        if (isControlHtmlAttributesSupported) {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
<#        
        } else {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#      
        }
#>
<#
        if (isCheckbox && isControlHtmlAttributesSupported) {
            PopIndent();
#>
                </div>
<#
        }
#>
            </div>
        </div>

<#
    }
}
#>
        </fieldset>
        <div class="modal-footer">
            <button type="button" class="btn btn-outline-danger" data-dismiss="modal">Cancelar</button>
            <button type="submit" value="Save" class="btn btn-outline-success">Salvar</button>

        </div>
		}
	 </div>
</div>

<#@ include file="ModelMetadataFunctions.cs.include.t4" #>